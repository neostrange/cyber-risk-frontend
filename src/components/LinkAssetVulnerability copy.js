import React, { useEffect, useState } from 'react';
import './LinkAssetVulnerability.css';
import AssetVulnerabilityGraph from './AssetVulnerabilityGraph';

const LinkAssetVulnerability = () => {
  const [assets, setAssets] = useState([]);
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [selectedAsset, setSelectedAsset] = useState('');
  const [selectedVulnerability, setSelectedVulnerability] = useState('');
  const [message, setMessage] = useState('');
  const [graphData, setGraphData] = useState({ nodes: [], links: [] });

  useEffect(() => {
    // Fetch assets and vulnerabilities on component mount
    const fetchAssets = async () => {
      try {
        const response = await fetch('http://172.25.161.89:5000/assets');
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const data = await response.json();
        setAssets(data);
      } catch (error) {
        console.error("Error fetching assets:", error);
      }
    };

    const fetchVulnerabilities = async () => {
      try {
        const response = await fetch('http://172.25.161.89:5000/vulnerabilities');
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const data = await response.json();
        setVulnerabilities(data);
      } catch (error) {
        console.error("Error fetching vulnerabilities:", error);
      }
    };

    fetchAssets();
    fetchVulnerabilities();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch('http://172.25.161.89:5000/link_asset_vulnerability', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          asset_name: selectedAsset,
          vulnerability_name: selectedVulnerability,
        }),
      });

      if (!response.ok) {
        throw new Error('Network response was not ok');
      }

      const data = await response.json();
      setMessage(data.message);

      // Update graph data after linking
      setGraphData(prevData => ({
        nodes: [
          ...prevData.nodes,
          { id: selectedAsset },
          { id: selectedVulnerability }
        ],
        links: [
          ...prevData.links,
          { source: selectedAsset, target: selectedVulnerability }
        ]
      }));

      // Optionally, reset the selection after successful linking
      setSelectedAsset('');
      setSelectedVulnerability('');
    } catch (error) {
      console.error("Error linking asset and vulnerability:", error);
      setMessage("Failed to link asset and vulnerability.");
    }
  };

  return (
    <div>
      <h2>Link Asset to Vulnerability</h2>
      <form onSubmit={handleSubmit}>
        <div>
          <label>Asset:</label>
          <select value={selectedAsset} onChange={(e) => setSelectedAsset(e.target.value)}>
            <option value="">Select an Asset</option>
            {assets.map((asset, index) => (
              <option key={index} value={asset.name}>{asset.name}</option>
            ))}
          </select>
        </div>
        <div>
          <label>Vulnerability:</label>
          <select value={selectedVulnerability} onChange={(e) => setSelectedVulnerability(e.target.value)}>
            <option value="">Select a Vulnerability</option>
            {vulnerabilities.map((vulnerability, index) => (
              <option key={index} value={vulnerability.name}>{vulnerability.name}</option>
            ))}
          </select>
        </div>
        <button type="submit">Link</button>
      </form>
      {message && <p>{message}</p>}
      <AssetVulnerabilityGraph data={graphData} />
    </div>
  );
};

export default LinkAssetVulnerability;