import React, { useEffect, useState } from 'react';
import './LinkAssetVulnerability.css';
import AssetVulnerabilityGraph from './AssetVulnerabilityGraph';

const LinkAssetVulnerability = () => {
  const [assets, setAssets] = useState([]);
  const [vulnerabilities, setVulnerabilities] = useState([]);
  const [selectedAsset, setSelectedAsset] = useState('');
  const [selectedVulnerability, setSelectedVulnerability] = useState('');
  const [message, setMessage] = useState('');
  const [graphData, setGraphData] = useState({ nodes: [], links: [] });

  useEffect(() => {
    const fetchAssets = async () => {
      try {
        const response = await fetch(`${process.env.REACT_APP_API_URL}/assets`);
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const data = await response.json();
        console.log("Fetched assets:", data); // Log the fetched data
        setAssets(data);
      } catch (error) {
        console.error("Error fetching assets:", error);
      }
    };

    const fetchVulnerabilities = async () => {
      try {
        const response = await fetch(`${process.env.REACT_APP_API_URL}/vulnerabilities`);
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        const data = await response.json();
        console.log("Fetched vulnerabilities:", data); // Log the fetched data
        setVulnerabilities(data);
      } catch (error) {
        console.error("Error fetching vulnerabilities:", error);
      }
    };

    fetchAssets();
    fetchVulnerabilities();
  }, []);

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const response = await fetch(`${process.env.REACT_APP_API_URL}/link_asset_vulnerability`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          assetName: selectedAsset,  // Use assetName instead of asset_name
          vulnName: selectedVulnerability,  // Use vulnName instead of vulnerability_name
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();  // Get error details from the response
        throw new Error(errorData.error || 'Failed to link asset and vulnerability.');
      }

      const data = await response.json();
      setMessage(data.message);

      // Update graph data after linking
      setGraphData(prevData => ({
        nodes: [
          ...prevData.nodes,
          { id: selectedAsset },
          { id: selectedVulnerability }
        ],
        links: [
          ...prevData.links,
          { source: selectedAsset, target: selectedVulnerability }
        ]
      }));

      // Optionally, reset the selection after successful linking
      setSelectedAsset('');
      setSelectedVulnerability('');
    } catch (error) {
      console.error("Error linking asset and vulnerability:", error);
      setMessage(error.message);  // Display the error message
    }
  };

  // Debugging: Log the graph data before rendering
  console.log("Graph Data:", graphData);

  return (
    <div>
      <h2>Link Asset to Vulnerability</h2>
      <form onSubmit={handleSubmit}>
        <div>
          <label>Asset:</label>
          <select value={selectedAsset} onChange={(e) => setSelectedAsset(e.target.value)}>
            <option value="">Select an Asset</option>
            {assets.map((asset) => (
              <option key={asset.assetID} value={asset.assetName}>{asset.assetName}</option>
            ))}
          </select>
        </div>

        <div>
          <label>Vulnerability:</label>
          <select value={selectedVulnerability} onChange={(e) => setSelectedVulnerability(e.target.value)}>
            <option value="">Select a Vulnerability</option>
            {vulnerabilities.map((vulnerability) => (
              <option key={vulnerability.vulnID} value={vulnerability.vulnName}>
                {vulnerability.vulnName} (Severity: {vulnerability.severity})
              </option>
            ))}
          </select>
        </div>

        <button type="submit">Link</button>
      </form>
      {message && <p>{message}</p>}
      
      {/* Check if graph data is valid before rendering the graph */}
      {graphData.nodes.length > 0 && graphData.links.length > 0 ? (
        <AssetVulnerabilityGraph data={graphData} />
      ) : (
        <p>No data to visualize.</p>
      )}
    </div>
  );
};

export default LinkAssetVulnerability;