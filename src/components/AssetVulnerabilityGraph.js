import React, { useState, useEffect } from "react";
import { Graph } from "react-d3-graph";

/**
 * ErrorBoundary component to handle errors in the graph rendering process.
 */
class ErrorBoundary extends React.Component {
  constructor(props) {
    super(props);
    this.state = { hasError: false };
  }

  static getDerivedStateFromError() {
    return { hasError: true };
  }

  componentDidCatch(error, info) {
    console.error("Error caught in ErrorBoundary:", error, info);
  }

  render() {
    if (this.state.hasError) {
      return <p>Something went wrong while rendering the graph. Please try again later.</p>;
    }
    return this.props.children;
  }
}

/**
 * AssetVulnerabilityGraph component displays a graph of assets and their vulnerabilities.
 *
 * @param {Object} props - Component properties
 * @param {Object} props.data - Graph data
 * @returns {JSX.Element} AssetVulnerabilityGraph component
 */
const AssetVulnerabilityGraph = ({ data }) => {
  const [graphData, setGraphData] = useState(null);

  // Validate and sanitize data
  useEffect(() => {
    if (
      data &&
      Array.isArray(data.nodes) &&
      Array.isArray(data.links) &&
      data.nodes.length > 0 &&
      data.links.length > 0
    ) {
      setGraphData(data);
    } else {
      console.warn("Invalid data structure provided to AssetVulnerabilityGraph.");
      setGraphData(null);
    }
  }, [data]);

  if (!graphData) {
    return <p>No valid data to visualize. Please provide nodes and links.</p>;
  }

  const graphConfig = {
    node: {
      color: "lightblue",
      size: 200,
      highlightStrokeColor: "blue",
      labelProperty: "name", // Assuming nodes have a "name" property for labels
    },
    link: {
      highlightColor: "lightblue",
    },
    directed: false,
    panAndZoom: true, // Enable pan and zoom functionality
    width: 800, // Optional: Fixed width for the graph
    height: 600, // Optional: Fixed height for the graph
  };

  /**
   * Handles node click events
   * @param {string} nodeId - ID of the clicked node
   */
  const onClickNode = (nodeId) => {
    if (!nodeId) {
      console.error("Node ID is undefined");
      return;
    }
    console.log(`Clicked node: ${nodeId}`);
    // Add additional logic here (e.g., open modal, display details)
  };

  /**
   * Handles link click events
   * @param {string} source - Source node ID of the link
   * @param {string} target - Target node ID of the link
   */
  const onClickLink = (source, target) => {
    console.log(`Clicked link between ${source} and ${target}`);
    // Add additional logic here (e.g., display relationship details)
  };

  /**
   * Handles node hover events
   * @param {string} nodeId - ID of the hovered node
   */
  const onMouseOverNode = (nodeId) => {
    console.log(`Hovered over node: ${nodeId}`);
  };

  /**
   * Handles node mouse out events
   * @param {string} nodeId - ID of the node
   */
  const onMouseOutNode = (nodeId) => {
    console.log(`Mouse left node: ${nodeId}`);
  };

  /**
   * Handles graph zoom events
   * @param {Object} zoomState - Zoom transform state
   */
  const onZoomChange = (zoomState) => {
    if (zoomState && zoomState.transform) {
      console.log("Zoom transform:", zoomState.transform);
    } else {
      console.error("Invalid zoom event or transform is undefined.");
    }
  };

  return (
    <ErrorBoundary>
      <div>
        <h2>Asset-Vulnerability Graph</h2>
        <Graph
          id="graph-id" // Unique identifier for the graph
          data={graphData}
          config={graphConfig}
          onClickNode={onClickNode}
          onClickLink={onClickLink}
          // onMouseOverNode={onMouseOverNode}
          // onMouseOutNode={onMouseOutNode}
          // onZoomChange={onZoomChange}
        />
      </div>
    </ErrorBoundary>
  );
};

export default AssetVulnerabilityGraph;
